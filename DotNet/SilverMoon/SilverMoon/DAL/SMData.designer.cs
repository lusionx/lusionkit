#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SilverMoon.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SilverMoon")]
	public partial class SMDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertsm_biz_Workpiece(sm_biz_Workpiece instance);
    partial void Updatesm_biz_Workpiece(sm_biz_Workpiece instance);
    partial void Deletesm_biz_Workpiece(sm_biz_Workpiece instance);
    partial void Insertsm_biz_State(sm_biz_State instance);
    partial void Updatesm_biz_State(sm_biz_State instance);
    partial void Deletesm_biz_State(sm_biz_State instance);
    #endregion
		
		public SMDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SMDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SMDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SMDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<sm_biz_Workpiece> sm_biz_Workpiece
		{
			get
			{
				return this.GetTable<sm_biz_Workpiece>();
			}
		}
		
		public System.Data.Linq.Table<sm_biz_State> sm_biz_State
		{
			get
			{
				return this.GetTable<sm_biz_State>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sm_biz_Workpiece")]
	public partial class sm_biz_Workpiece : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private char _MachineID;
		
		private char _Type;
		
		private System.DateTime _Date;
		
		private char _Shift;
		
		private short _Serial;
		
		private int _State;
		
		private string _Remark;
		
		private System.Nullable<System.DateTime> _Time;
		
		private EntityRef<sm_biz_State> _sm_biz_State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMachineIDChanging(char value);
    partial void OnMachineIDChanged();
    partial void OnTypeChanging(char value);
    partial void OnTypeChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnShiftChanging(char value);
    partial void OnShiftChanged();
    partial void OnSerialChanging(short value);
    partial void OnSerialChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    #endregion
		
		public sm_biz_Workpiece()
		{
			this._sm_biz_State = default(EntityRef<sm_biz_State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineID", DbType="NChar(1) NOT NULL", IsPrimaryKey=true)]
		public char MachineID
		{
			get
			{
				return this._MachineID;
			}
			set
			{
				if ((this._MachineID != value))
				{
					this.OnMachineIDChanging(value);
					this.SendPropertyChanging();
					this._MachineID = value;
					this.SendPropertyChanged("MachineID");
					this.OnMachineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NChar(1) NOT NULL", IsPrimaryKey=true)]
		public char Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shift", DbType="NChar(1) NOT NULL", IsPrimaryKey=true)]
		public char Shift
		{
			get
			{
				return this._Shift;
			}
			set
			{
				if ((this._Shift != value))
				{
					this.OnShiftChanging(value);
					this.SendPropertyChanging();
					this._Shift = value;
					this.SendPropertyChanged("Shift");
					this.OnShiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Serial", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Serial
		{
			get
			{
				return this._Serial;
			}
			set
			{
				if ((this._Serial != value))
				{
					this.OnSerialChanging(value);
					this.SendPropertyChanging();
					this._Serial = value;
					this.SendPropertyChanged("Serial");
					this.OnSerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int NOT NULL")]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					if (this._sm_biz_State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="NVarChar(50)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sm_biz_State_sm_biz_Workpiece", Storage="_sm_biz_State", ThisKey="State", OtherKey="ID", IsForeignKey=true)]
		public sm_biz_State sm_biz_State
		{
			get
			{
				return this._sm_biz_State.Entity;
			}
			set
			{
				sm_biz_State previousValue = this._sm_biz_State.Entity;
				if (((previousValue != value) 
							|| (this._sm_biz_State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sm_biz_State.Entity = null;
						previousValue.sm_biz_Workpieces.Remove(this);
					}
					this._sm_biz_State.Entity = value;
					if ((value != null))
					{
						value.sm_biz_Workpieces.Add(this);
						this._State = value.ID;
					}
					else
					{
						this._State = default(int);
					}
					this.SendPropertyChanged("sm_biz_State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sm_biz_State")]
	public partial class sm_biz_State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Group;
		
		private string _Name;
		
		private EntitySet<sm_biz_Workpiece> _sm_biz_Workpieces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGroupChanging(int value);
    partial void OnGroupChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public sm_biz_State()
		{
			this._sm_biz_Workpieces = new EntitySet<sm_biz_Workpiece>(new Action<sm_biz_Workpiece>(this.attach_sm_biz_Workpieces), new Action<sm_biz_Workpiece>(this.detach_sm_biz_Workpieces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Group]", Storage="_Group", DbType="Int NOT NULL")]
		public int Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sm_biz_State_sm_biz_Workpiece", Storage="_sm_biz_Workpieces", ThisKey="ID", OtherKey="State")]
		public EntitySet<sm_biz_Workpiece> sm_biz_Workpieces
		{
			get
			{
				return this._sm_biz_Workpieces;
			}
			set
			{
				this._sm_biz_Workpieces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sm_biz_Workpieces(sm_biz_Workpiece entity)
		{
			this.SendPropertyChanging();
			entity.sm_biz_State = this;
		}
		
		private void detach_sm_biz_Workpieces(sm_biz_Workpiece entity)
		{
			this.SendPropertyChanging();
			entity.sm_biz_State = null;
		}
	}
}
#pragma warning restore 1591
